class Solution {
    public int mostFrequentPrime(int[][] mat) {
        Map<Integer, Integer> numbers = new HashMap<>();
        int m = mat.length;
        int n = mat[0].length;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int num = mat[i][j];
              
                // East
                int temp = num;
                for (int y = j + 1; y < n; y++) {
                    temp = temp * 10 + mat[i][y];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
                // South-East
                temp = num;
                for (int x = i + 1, y = j + 1; x < m && y < n; x++, y++) {
                    temp = temp * 10 + mat[x][y];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
                // South
                temp = num;
                for (int x = i + 1; x < m; x++) {
                    temp = temp * 10 + mat[x][j];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
                // South-West
                temp = num;
                for (int x = i + 1, y = j - 1; x < m && y >= 0; x++, y--) {
                    temp = temp * 10 + mat[x][y];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
                // West
                temp = num;
                for (int y = j - 1; y >= 0; y--) {
                    temp = temp * 10 + mat[i][y];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
                // North-West
                temp = num;
                for (int x = i - 1, y = j - 1; x >= 0 && y >= 0; x--, y--) {
                    temp = temp * 10 + mat[x][y];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
                // North
                temp = num;
                for (int x = i - 1; x >= 0; x--) {
                    temp = temp * 10 + mat[x][j];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
                // North-East
                temp = num;
                for (int x = i - 1, y = j + 1; x >= 0 && y < n; x--, y++) {
                    temp = temp * 10 + mat[x][y];
                    if (temp > 10 && isPrime(temp))
                        numbers.put(temp, numbers.getOrDefault(temp, 0) + 1);
                }
            }
        }

        int maxFrequency = 0;
        int mostFrequentPrime = -1;
        for (Map.Entry<Integer, Integer> entry : numbers.entrySet()) {
            int prime = entry.getKey();
            int frequency = entry.getValue();
            if (frequency > maxFrequency || (frequency == maxFrequency && prime > mostFrequentPrime)) {
                maxFrequency = frequency;
                mostFrequentPrime = prime;
            }
        }
        return mostFrequentPrime;
    }

    private boolean isPrime(int num) {
        if (num <= 1)
            return false;
        for (int i = 2; i <= Math.sqrt(num); ++i) {
            if (num % i == 0)
                return false;
        }
        return true;
    }
}
